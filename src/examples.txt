//Aqui
param gearDiameter 100
param gearTeeth 20

// Define a gear shape with a square shaft
shape gear myGear {
  diameter: param.gearDiameter
  teeth: param.gearTeeth
  shaft: "square"
  shaftSize: 20
  position: [50, 50]
}

||||||||||||||||||||||||||||

// Define a closed pentagon shape
shape path myPentagon {
  points: [
    [0, 50],  // Top vertex
    [47, 15],  // Top-right
    [29, -40], // Bottom-right
    [-29, -40], // Bottom-left
    [-47, 15], // Top-left
    [0, 50],    // Closing the shape (same as first point)
  ]
  position: [50, 50]
}

// Add the shape to a layer
layer main {
  add myPentagon
}

||||||||||||||||||||||||||||


//Aqui
param size 100
param showDetails true
param isSpecial false
param enabled true

// First define the circle1 shape
shape circle circle1 {
    radius: 30
    position: [50 50]
}

if size > 50 {
    shape circle bigCircle {
        radius: size
        position: [100 100]
    }
}

// If-else statement with complex condition
if (size > 50 and showDetails) or isSpecial {
    shape gear mainGear {
        teeth: 20
        position: [150 150]
    }
} else {
    shape circle simpleCircle {
        radius: size / 2
        position: [150 150]
    }
}

// Conditional in layer
layer main {
    add circle1
    rotate 45
}

||||||||||||||||||||||||||||

//Aqui
for i from 0 to 5 {
    shape circle circle1 {
        radius: 10
        position: [i * 30 50]
    }
}

transform circle1_4 {
    scale: 2
}


||||||||||||||||||||||||||||
// Test with rectangles
param size 40

// Create three rectangles
shape rectangle rect1 {
    width: param.size
    height: param.size
    position: [0, 0]
}

shape rectangle rect2 {
    width: param.size
    height: param.size
    position: [100, 0]
}

shape rectangle rect3 {
    width: param.size
    height: param.size
    position: [-100, 0]
}

// Create layer and only add rect1
layer testLayer {
    add rect1  // Only rect1 should rotate
    rotate 45
}

||||||||||||||||||||||

draw test {
  forward 50
  right 90
  forward 50
}


|||||||||||||||||||||

def createCircle(x, y, radius) {
    shape circle dynamicCircle {
        radius: radius
        position: [x, y]
    }
    
}

// Define a function that creates a pattern
def createCircleGrid(startX, startY, rows, cols, spacing, baseRadius) {
    for i from 0 to rows - 1 {
        for j from 0 to cols - 1 {
            param x startX + j * spacing
            param y startY + i * spacing
            param radius baseRadius * (1 + 0.3 * (i + j) / (rows + cols))
            
            // Call the circle creation function
            createCircle(param.x, param.y, param.radius)
        }
    }
}

// Use the function
createCircleGrid(-100, -100, 5, 5, 40, 10)